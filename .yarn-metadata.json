{
  "manifest": {
    "name": "react-native-google-signin",
    "version": "0.11.0",
    "description": "Google Signin for your react native applications",
    "main": "index.js",
    "author": {
      "name": "devfd",
      "email": "apptailor.co@gmail.com",
      "url": "https://github.com/devfd"
    },
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "keywords": [
      "react-component",
      "react-native",
      "google signin",
      "google login",
      "google+",
      "oauth",
      "oauth2",
      "ios",
      "android"
    ],
    "homepage": "https://github.com/devfd/react-native-google-signin",
    "repository": {
      "type": "git",
      "url": "https://github.com/devfd/react-native-google-signin"
    },
    "bugs": {
      "url": "https://github.com/devfd/react-native-google-signin/issues"
    },
    "peerDependencies": {
      "react": ">=15.4.0 || ^16.0.0-alpha",
      "react-native": ">=0.40",
      "prop-types": "^15.5.10"
    },
    "rnpm": {
      "ios": {
        "project": "ios/RNGoogleSignin.xcodeproj",
        "sharedLibraries": [
          "libz",
          "SafariServices",
          "SystemConfiguration",
          "AddressBook"
        ]
      }
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "C:\\Users\\quho\\AppData\\Local\\Yarn\\Cache\\v1\\npm-react-native-google-signin-0.11.0-de9df66ade2392db1b431c92bc7329fde715460c\\package.json",
    "readmeFilename": "README.md",
    "readme": "# react-native-google-signin\n\n[![xcode config](https://github.com/apptailor/react-native-google-signin/raw/master/img/demo-app.gif)](#demo)\n\n## Features\n- Support all 3 types of authentication methods (standard, with server-side validation or with offline access (aka server side access))\n- Native signin button\n- Consistent API between Android and iOS\n- Promise-based JS API\n\n\n## Installation\n\n```bash\nnpm install react-native-google-signin --save\nreact-native link react-native-google-signin\n```\n\n### Note\n\nIf you use React Native < `v0.40` stick with `v0.8.1` (`npm install react-native-google-signin@0.8 --save`).\n\nIf you use React Native < `v0.47` stick with `v0.10.0` (`npm install react-native-google-signin@0.10 --save`).\n\n## Project setup and initialization\n\nSee [Android guide](android-guide.md) and [iOS guide](ios-guide.md)\n\n\n## Public API\n\n### 1. GoogleSigninButton\n\n[![signin button](img/signin-button.png)](#button)\n\n```js\nimport {GoogleSignin, GoogleSigninButton} from 'react-native-google-signin';\n\nrender() {\n\n  <GoogleSigninButton\n    style={{width: 48, height: 48}}\n    size={GoogleSigninButton.Size.Icon}\n    color={GoogleSigninButton.Color.Dark}\n    onPress={this._signIn.bind(this)}/>\n}\n```\n\nPossible value for ```size``` are:\n- Size.Icon: display only Google icon. recommended size of 48 x 48\n- Size.Standard: icon with 'Sign in'. recommended size of 230 x 48\n- Size.Wide: icon with 'Sign in with Google'. recommended size of 312 x 48\n\nPossible value for ```color``` are:\n- Color.Dark: apply a blue background\n- Color.Light: apply a light gray background\n\n\n### 2. GoogleSignin\n\n```js\nimport {GoogleSignin, GoogleSigninButton} from 'react-native-google-signin';\n```\n\n####  - hasPlayServices\nCheck if device has google play services installed. Always return true on iOS.\n```js\nGoogleSignin.hasPlayServices({ autoResolve: true }).then(() => {\n    // play services are available. can now configure library\n})\n.catch((err) => {\n  console.log(\"Play services error\", err.code, err.message);\n})\n```\n\nwhen ```autoResolve``` the library will prompt the user to take action to solve the issue.\n\nFor example if the play services are not installed it will prompt:\n[![prompt install](img/prompt-install.png)](#prompt-install)\n\n#### - configure\nIt is mandatory to call this method before login.\n\nExample for default configuration. you get user email and basic profile info.\n```js\nimport {GoogleSignin, GoogleSigninButton} from 'react-native-google-signin';\n\nGoogleSignin.configure({\n  iosClientId: <FROM DEVELOPER CONSOLE>, // only for iOS\n})\n.then(() => {\n  // you can now call currentUserAsync()\n});\n```\n\nExample to access Google Drive both from the mobile application and from the backend server\n```js\nGoogleSignin.configure({\n  scopes: [\"https://www.googleapis.com/auth/drive.readonly\"], // what API you want to access on behalf of the user, default is email and profile\n  iosClientId: <FROM DEVELOPER CONSOLE>, // only for iOS\n  webClientId: <FROM DEVELOPER CONSOLE>, // client ID of type WEB for your server (needed to verify user ID and offline access)\n  offlineAccess: true // if you want to access Google API on behalf of the user FROM YOUR SERVER\n  hostedDomain: '' // specifies a hosted domain restriction\n  forceConsentPrompt: true // [Android] if you want to show the authorization prompt at each login\n  accountName: '' // [Android] specifies an account name on the device that should be used\n})\n.then(() => {\n  // you can now call currentUserAsync()\n});\n\n```\n\n**iOS Note**: your app ClientID (```iosClientId```) is always required\n\n#### - currentUserAsync\nTypically called on the ```componentDidMount``` of your main component. This method give you the current user if already login or null if not yet signin.\n\n```js\nGoogleSignin.currentUserAsync().then((user) => {\n      console.log('USER', user);\n      this.setState({user: user});\n    }).done();\n```\n\n#### - currentUser\nsimple getter to access user once signed in.\n```js\nconst user = GoogleSignin.currentUser();\n// user is null if not signed in\n```\n\n#### - signIn\nPrompt the modal to let the user signin into your application\n```js\nGoogleSignin.signIn()\n.then((user) => {\n  console.log(user);\n  this.setState({user: user});\n})\n.catch((err) => {\n  console.log('WRONG SIGNIN', err);\n})\n.done();\n```\n\n#### - getAccessToken (Android Only)\nObtain the user access token. \n\n```js\nGoogleSignin.getAccessToken()\n.then((token) => {\n  console.log(token);\n})\n.catch((err) => {\n  console.log(err);\n})\n.done();\n```\n\n**iOS Note**: an error with code ```-5``` is returned if the user cancels the signin process\n\n#### - signOut\nremove user session from the device\n```js\nGoogleSignin.signOut()\n.then(() => {\n  console.log('out');\n})\n.catch((err) => {\n\n});\n```\n\n**iOS Note**: the signOut method does not return any event. you success callback will always be called.\n\n#### - revokeAccess\nremove your application from the user authorized applications\n```js\nGoogleSignin.revokeAccess()\n.then(() => {\n  console.log('deleted');\n})\n.catch((err) => {\n\n})\n```\n### 3. User\n\nThis is the typical information you obtain once the user sign in:\n```\n  {\n    id: <user id. do not use on the backend>\n    name: <user name>\n    givenName: <user given name> (Android only)\n    familyName: <user family name> (Android only)\n    email: <user email>\n    photo: <user picture profile>\n    idToken: <token to authenticate the user on the backend>\n    serverAuthCode: <one-time token to access Google API from the backend on behalf of the user>\n    scopes: <list of authorized scopes>\n    accessToken: <needed to access google API from the application>\n  }\n```\n\n**Android Note**: To obtain the user accessToken call `getAccessToken`\n\n**idToken Note**: idToken is not null only if you specify a valid ```webClientId```. ```webClientId``` corresponds to your server clientID on the developers console. It **HAS TO BE** of type **WEB**\n\nRead [iOS documentation](https://developers.google.com/identity/sign-in/ios/backend-auth) and [Android documentation](https://developers.google.com/identity/sign-in/android/backend-auth) for more information\n\n**serverAuthCode Note**: serverAuthCode is not null only if you specify a valid ```webClientId``` and set ```offlineAccess``` to true. once you get the auth code, you can send it to your backend server and exchange the code for an access token. Only with this freshly acquired token can you access user data.\n\nRead [iOS documentation](https://developers.google.com/identity/sign-in/ios/offline-access) and [Android documentation](https://developers.google.com/identity/sign-in/android/offline-access) for more information\n\n## Additional scopes\n\nThe default requested scopes are ```email``` and ```profile```.\n\nIf you want to manage other data from your application (for example access user agenda or upload a file to drive) you need to request additional permissions. This can be accomplished by adding the necessary scopes when configuring the GoogleSignin instance.\n\nPlease visit https://developers.google.com/oauthplayground/ for a list of available scopes.\n\n## Licence\n(MIT)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Apptailor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://github.com/nico1510/react-native-google-signin.git#de9df66ade2392db1b431c92bc7329fde715460c",
    "type": "git",
    "reference": "https://github.com/nico1510/react-native-google-signin.git",
    "hash": "de9df66ade2392db1b431c92bc7329fde715460c",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "de9df66ade2392db1b431c92bc7329fde715460c"
}